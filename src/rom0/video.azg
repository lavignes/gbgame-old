;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Copy colors to BG palette
;
; args:
;	a	dst BG pal index
;	hl	src color addr
;	c	num palettes
;
; modifies: a, c, de, hl
;
; example:
;	ld a, <palette index>
;	lh hl, <color data addr>
;	ld c, 1
;	call VideoBGPaletteWrite
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
VideoBGPaletteWrite:
	; Multiply c and a to byte offsets
	sla c ; c *= 4
	sla c

	sla a ; a *= 8
	sla a
	sla a

	; Set BG palette index to a
	ld de, HW_IO_BCPS
	set 7, a	; enable auto-incremting
	ld (de), a

	; increment to get BCPD addr
	inc de	; ld de, BCPD
.loop:
	push hl
	call VideoWaitForVBlankOrHBlank
	pop hl
	ld a, (hl+)
	ld (de), a
	ld a, (hl+)
	ld (de), a
	dec c
	jr nz, .loop

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Copy colors to OBJ palette
;
; args:
; 	a	dst OBJ pal index
;	hl	src color addr
;	c	num palettes
; modifies: a, bc, de, hl
;
; example:
;	ld a, <palette index>
;	lh hl, <color data addr>
;	ld c, 1
;	call VideoOBJPaletteWrite
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
VideoOBJPaletteWrite:
	; Multiply c and a to byte offsets
	sla c ; c *= 4
	sla c

	sla a ; a *= 8
	sla a
	sla a

	; Set OBJ palette index to a
	ld de, HW_IO_OCPS
	set 7, a	; enable auto-incremting
	ld (de), a

	; increment to get OCPD addr
	inc de	; ld de, OCPD
	jr VideoBGPaletteWrite.loop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Wait for VBlank or HBlank to start
;
; modifies: hl
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
VideoWaitForVBlankOrHBlank:
	ld hl, HW_IO_STAT
.wait:
	bit 1, (hl)
	jr nz, .wait
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Disable Video
;
; modifies: a, b
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
VideoDisable:
	; check if already disabled
	ldh a, (HW_IO_LCDC)
	bit HW_LCDC_BIT_SCREEN_ENABLE, a
	ret z

	xor a
	ldh (HW_IO_IF), a
	ldh a, (HW_IO_IE)
	ld b, a

	res HW_IF_BIT_VBLANK, a
	ldh (HW_IO_IE), a

.wait:
	ldh a, (HW_IO_LY)
	cp HW_LY_VBLANK_START + 1
	jr nz, .wait

	ldh a, (HW_IO_LCDC)
	res HW_LCDC_BIT_SCREEN_ENABLE, a
	ldh (HW_IO_LCDC), a

	xor a
	ldh (HW_IO_IF), a
	ld a, b
	ldh (HW_IO_IE), a
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Enable Video
;
; modifies: a
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
VideoEnable:
	ldh a, (HW_IO_LCDC)
	set HW_LCDC_BIT_SCREEN_ENABLE, a
	ldh (HW_IO_LCDC), a
	ret

Palette:
	COLOR $FF, $FF, $FF
	COLOR $FF, $FF, $FF
	COLOR $FF, $FF, $FF
	COLOR $00, $00, $00

Tile:
	@db %11000011
	@db %11000011
	@db %11000011
	@db %11000011
	@db %11000011
	@db %11000011
	@db %00000000
	@db %00000000
	@db %00000000
	@db %00000000
	@db %00000000
	@db %00000000
	@db %11000011
	@db %11000011
	@db %11111111
	@db %11111111
@defn .len, @here - Tile

@defl VIDEO_BG_TILE_DATA_BASE, $8800
@defl VIDEO_BG_TILE_MAP_BASE, $9800

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initialize Video settings
;
; modifies: a, bc, de, hl
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
VideoInit:
	; Enable 8x16 sprites
	; Set BG tile data base to $8800
	; Set BG map to $9800
	ldh a, (HW_IO_LCDC)
	or +(1 << HW_LCDC_BIT_OBJ_SIZE)	\
		| (1 << HW_LCDC_BIT_OBJ_ENABLE)
	and $FF \
		& ~((1 << HW_LCDC_BIT_TILE_DATA) \
		| (1 << HW_LCDC_BIT_BG_TILE_MAP))
	ldh (HW_IO_LCDC), a

	ld a, 1
	ld hl, Palette
	ld c, 1
	call VideoBGPaletteWrite

	ld de, VIDEO_BG_TILE_DATA_BASE
	ld hl, Tile
	ld bc, Tile.len
	call UtilMemCopy

	ld a, 1
	ldh (HW_IO_VBK), a

	ld hl, VIDEO_BG_TILE_MAP_BASE
	ld (hl+), a

	xor a
	ldh (HW_IO_VBK), a

	ld a, $80
	ld hl, VIDEO_BG_TILE_MAP_BASE
	ld (hl+), a

	ret
